<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cun.yun.card.admin.dal.dao.BankMapper">
  <resultMap id="BaseResultMap" type="cun.yun.card.admin.dal.model.Bank">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="iamge" jdbcType="VARCHAR" property="iamge" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
    <result column="is_employ" jdbcType="INTEGER" property="isEmploy" />
    <result column="updated_time" jdbcType="TIMESTAMP" property="updatedTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />

  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cun.yun.card.admin.dal.model.Bank">
    <result column="introduce" jdbcType="LONGVARCHAR" property="introduce" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, iamge, price, sort, is_employ, updated_time,create_time
  </sql>
  <sql id="Blob_Column_List">
    introduce
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from bank
    where id = #{id,jdbcType=BIGINT}
  </select>
  <insert id="insert" parameterType="cun.yun.card.admin.dal.model.Bank">
    insert into bank (id, name, iamge, 
      price, sort, is_employ, 
      updated_time, introduce)
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{iamge,jdbcType=VARCHAR}, 
      #{price,jdbcType=DECIMAL}, #{sort,jdbcType=INTEGER}, #{isEmploy,jdbcType=INTEGER}, 
      #{updatedTime,jdbcType=TIMESTAMP}, #{introduce,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cun.yun.card.admin.dal.model.Bank">
    insert into bank
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="iamge != null">
        iamge,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="isEmploy != null">
        is_employ,
      </if>
      <if test="updatedTime != null">
        updated_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="introduce != null">
        introduce,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="iamge != null">
        #{iamge,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
      <if test="isEmploy != null">
        #{isEmploy,jdbcType=INTEGER},
      </if>
      <if test="updatedTime != null">
        #{updatedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="introduce != null">
        #{introduce,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cun.yun.card.admin.dal.model.Bank">
    update bank
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="iamge != null">
        iamge = #{iamge,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
      <if test="isEmploy != null">
        is_employ = #{isEmploy,jdbcType=INTEGER},
      </if>
      <if test="updatedTime != null">
        updated_time = #{updatedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="introduce != null">
        introduce = #{introduce,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cun.yun.card.admin.dal.model.Bank">
    update bank
    set name = #{name,jdbcType=VARCHAR},
      iamge = #{iamge,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      sort = #{sort,jdbcType=INTEGER},
      is_employ = #{isEmploy,jdbcType=INTEGER},
      updated_time = #{updatedTime,jdbcType=TIMESTAMP},
      introduce = #{introduce,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cun.yun.card.admin.dal.model.Bank">
    update bank
    set name = #{name,jdbcType=VARCHAR},
      iamge = #{iamge,jdbcType=VARCHAR},
      price = #{price,jdbcType=DECIMAL},
      sort = #{sort,jdbcType=INTEGER},
      is_employ = #{isEmploy,jdbcType=INTEGER},
      updated_time = #{updatedTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>


  <select id="bankList" resultType="cun.yun.card.admin.dal.dto.BankDto">
    SELECT
    a.id,
    a.`name` bankName,
    a.iamge,
    a.introduce,
    (
      SELECT
       COUNT(l.id) count
      FROM
      bank b
      LEFT JOIN bank_link l ON b.id = l.bank_id
      AND b.is_employ = 0
      AND l.is_employ = 0
      WHERE
      b.id = a.id
      GROUP BY
      b.`name`
    ) count,
    a.sort,
    a.price
    FROM
    bank a
    WHERE  a.is_employ=0
    <if test="name != null and name !=''">
      AND a.name = #{name,jdbcType=VARCHAR}
    </if>
    ORDER BY a.sort
    LIMIT #{begin},#{end}
  </select>

  <select id="totalCount" resultType="int">
    SELECT
    COUNT(1) count
    FROM
    bank
    WHERE is_employ=0
    <if test="name != null and name !=''">
      AND name = #{name,jdbcType=VARCHAR}
    </if>
  </select>


  <select id="queryByBankName" resultMap="BaseResultMap">
    SELECT
    *
    FROM
    bank
    WHERE is_employ=0
    <if test="name != null and name !=''">
      AND name = #{name,jdbcType=VARCHAR}
    </if>

  </select>

  <select id="queryMaxSort" resultType="int">
    SELECT
        MAX(sort) sort
    FROM
        bank
    WHERE is_employ=0
  </select>
</mapper>